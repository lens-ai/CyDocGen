# üìã Compliance Documentation Generator - Multi-Sector Client Workflow
# Copy this file to .github/workflows/compliance-docs.yml in your repository
# Then add required secrets to your repository settings
# Supports: Healthcare (FDA), Financial, Automotive, Aerospace, Industrial

name: üìã Generate Compliance Documentation

on:
  # Manual trigger - for ad-hoc documentation generation
  workflow_dispatch:
    inputs:
      device_name:
        description: 'Your Product/System Name'
        required: true
        default: 'My Product'
      device_manufacturer:
        description: 'Your Company Name'
        required: true
        default: 'My Company'
      device_version:
        description: 'Software Version'
        required: false
        default: '1.0.0'
      output_format:
        description: 'Documentation Scope'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - incremental
      publish_to_confluence:
        description: 'Publish to Confluence'
        required: false
        type: boolean
        default: false

  # Automatic trigger - on release tags
  push:
    tags:
      - 'v*'
      - 'release-*'
      - '*.*.*'

jobs:
  generate-compliance-docs:
    name: üìã Generate Compliance Documents
    runs-on: ubuntu-latest
    permissions:
      contents: read        # Read repository contents
      issues: read          # Read issues
      pull-requests: read   # Read pull requests
      security-events: read # Read security advisories

    steps:
    - name: üìã Checkout Repository
      uses: actions/checkout@v4

    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üì¶ Pull Compliance Generator
      run: |
        # Define generator version (pin to specific version for stability)
        # Options:
        #   - Specific version: 1.2.3
        #   - Minor version: 1.2 (auto-updates patch versions)
        #   - Major version: 1 (auto-updates minor & patch)
        #   - Latest: latest (always newest, less stable)
        GENERATOR_VERSION="${{ vars.GENERATOR_VERSION || '2' }}"  # Default to major version 2

        echo "üì¶ Pulling Compliance Generator container (version: ${GENERATOR_VERSION})..."
        if docker pull lensai/lensai-fda-cybersecurity:${GENERATOR_VERSION}; then
          echo "‚úÖ Using Compliance Generator version: ${GENERATOR_VERSION}"
          # Tag it as 'latest' locally for consistency
          docker tag lensai/lensai-fda-cybersecurity:${GENERATOR_VERSION} lensai/lensai-fda-cybersecurity:latest
        else
          echo "‚ö†Ô∏è Version ${GENERATOR_VERSION} not found, falling back to latest..."
          docker pull lensai/lensai-fda-cybersecurity:latest
        fi

        echo "‚úÖ Container ready!"

    - name: üìã Generate Compliance Documentation
      env:
        # ============================================================
        # SECTOR CONFIGURATION (NEW!)
        # ============================================================
        SECTOR: ${{ vars.SECTOR || 'healthcare' }}  # healthcare, financial, automotive, aerospace, industrial

        # ============================================================
        # HEALTHCARE-SPECIFIC VARIABLES (Optional)
        # Set as repository variables for enhanced FDA documentation
        # ============================================================
        DEVICE_CLASS: ${{ vars.DEVICE_CLASS || '' }}  # FDA Class: I, II, or III
        INTENDED_USE: ${{ vars.INTENDED_USE || '' }}  # Clinical purpose of device
        PATIENT_POPULATION: ${{ vars.PATIENT_POPULATION || '' }}  # Target patient demographics
        CLINICAL_ENVIRONMENT: ${{ vars.CLINICAL_ENVIRONMENT || '' }}  # Hospital, ICU, home, etc.
        SAMD_CATEGORY: ${{ vars.SAMD_CATEGORY || '' }}  # Software as Medical Device: CLASS_I to CLASS_IV
        HEALTHCARE_SYSTEMS: ${{ vars.HEALTHCARE_SYSTEMS || '' }}  # Integration: HL7,FHIR,DICOM,EHR
        MULTI_PATIENT_CAPABLE: ${{ vars.MULTI_PATIENT_CAPABLE || '' }}  # true/false
        REGULATORY_SUBMISSION_TYPE: ${{ vars.REGULATORY_SUBMISSION_TYPE || '' }}  # 510(k), PMA, De Novo

        # ============================================================
        # CORE CONFIGURATION
        # ============================================================
        LENSAI_API_KEY: ${{ secrets.LENSAI_API_KEY }}
        LENSAI_MODEL: "deepseek-ai/DeepSeek-V3-0324"
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPO: ${{ github.repository }}
        DEVICE_NAME: ${{ github.event.inputs.device_name }}
        DEVICE_VERSION: ${{ github.event.inputs.device_version }}
        DEVICE_MANUFACTURER: ${{ github.event.inputs.device_manufacturer }}

        # ============================================================
        # ATLASSIAN INTEGRATION (OPTIONAL)
        # ============================================================
        JIRA_URL: ${{ secrets.JIRA_URL }}
        JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}
        CONFLUENCE_URL: ${{ secrets.CONFLUENCE_URL }}
        CONFLUENCE_EMAIL: ${{ secrets.CONFLUENCE_EMAIL }}
        CONFLUENCE_API_TOKEN: ${{ secrets.CONFLUENCE_API_TOKEN }}
        CONFLUENCE_SPACE_KEY: ${{ secrets.CONFLUENCE_SPACE_KEY }}

        # ============================================================
        # FEATURE CONFIGURATION
        # ============================================================
        # Confluence Publishing (auto-publishes if credentials configured)
        CONFLUENCE_PUBLISH: ${{ github.event.inputs.publish_to_confluence == 'true' && 'true' || 'auto' }}

        # Patch Generation (automatically generates fixes for vulnerabilities)
        ENABLE_PATCH_GENERATION: "true"

        # JIRA Time Windows
        JIRA_RECENT_DAYS: "90"
        JIRA_SECURITY_DAYS: "180"
        JIRA_DEFAULT_DAYS: "60"

        # Evidence Processing (Batched - no minimums required)
        # The system intelligently handles whatever evidence is available
        FDA_MIN_GITHUB_COMMITS: "0"
        FDA_MIN_SEMGREP_FINDINGS: "0"
        FDA_MIN_JIRA_TICKETS: "0"
        FDA_MIN_CONFLUENCE_PAGES: "0"
        FDA_MIN_SBOM_COMPONENTS: "0"

        # Generation settings
        OUTPUT_DIR: "/output"
        GENERATION_MODE: "${{ github.event.inputs.output_format || 'full' }}"
        OUTPUT_FORMAT: "markdown"

        # Evidence optimization
        FDA_MAX_CODE_EVIDENCE_CHARS: "200000"  # Preserve more code context

      run: |
        echo "üöÄ Starting compliance documentation generation..."
        echo "üìä Analyzing repository: ${{ github.repository }}"
        echo "üè¢ Sector: ${SECTOR}"
        echo "üì¶ Product: ${{ github.event.inputs.device_name }} v${{ github.event.inputs.device_version }}"

        # Show healthcare-specific configuration if applicable
        if [ "${SECTOR}" = "healthcare" ]; then
          echo "üè• Healthcare Configuration:"
          [ -n "${DEVICE_CLASS}" ] && echo "  - FDA Device Class: ${DEVICE_CLASS}"
          [ -n "${INTENDED_USE}" ] && echo "  - Intended Use: ${INTENDED_USE}"
          [ -n "${SAMD_CATEGORY}" ] && echo "  - SaMD Category: ${SAMD_CATEGORY}"
          [ -n "${REGULATORY_SUBMISSION_TYPE}" ] && echo "  - Submission Type: ${REGULATORY_SUBMISSION_TYPE}"
        fi

        # Create output directory
        mkdir -p ./compliance-output

        # Record start time
        START_TIME=$(date +%s)

        # Run compliance documentation generator
        docker run --rm \
          -e SECTOR \
          -e DEVICE_CLASS \
          -e INTENDED_USE \
          -e PATIENT_POPULATION \
          -e CLINICAL_ENVIRONMENT \
          -e SAMD_CATEGORY \
          -e HEALTHCARE_SYSTEMS \
          -e MULTI_PATIENT_CAPABLE \
          -e REGULATORY_SUBMISSION_TYPE \
          -e LENSAI_API_KEY \
          -e LENSAI_MODEL \
          -e GITHUB_TOKEN \
          -e GITHUB_REPO \
          -e DEVICE_NAME \
          -e DEVICE_VERSION \
          -e DEVICE_MANUFACTURER \
          -e JIRA_URL \
          -e JIRA_EMAIL \
          -e JIRA_API_TOKEN \
          -e JIRA_PROJECT_KEY \
          -e CONFLUENCE_URL \
          -e CONFLUENCE_EMAIL \
          -e CONFLUENCE_API_TOKEN \
          -e CONFLUENCE_SPACE_KEY \
          -e CONFLUENCE_PUBLISH \
          -e ENABLE_PATCH_GENERATION \
          -e JIRA_RECENT_DAYS \
          -e JIRA_SECURITY_DAYS \
          -e JIRA_DEFAULT_DAYS \
          -e FDA_MIN_GITHUB_COMMITS \
          -e FDA_MIN_SEMGREP_FINDINGS \
          -e FDA_MIN_JIRA_TICKETS \
          -e FDA_MIN_CONFLUENCE_PAGES \
          -e FDA_MIN_SBOM_COMPONENTS \
          -e OUTPUT_DIR \
          -e GENERATION_MODE \
          -e OUTPUT_FORMAT \
          -e FDA_MAX_CODE_EVIDENCE_CHARS \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v ${{ github.workspace }}:/repo:ro \
          -v ${{ github.workspace }}/compliance-output:/output \
          lensai/lensai-fda-cybersecurity:latest \
          python -m src.main --mode ${{ github.event.inputs.output_format }} --output-dir /output

        # Calculate generation time
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))

        # Count generated documents
        DOC_COUNT=$(find ./compliance-output -name "*.md" -type f | wc -l)

        # Calculate success rate
        if [ "${{ github.event.inputs.output_format }}" = "full" ]; then
          TOTAL_DOCS=11
        else
          TOTAL_DOCS=6  # Essential documents only
        fi
        SUCCESS_RATE=$(( (DOC_COUNT * 100) / TOTAL_DOCS ))

        echo "üìä GENERATION RESULTS:"
        echo "   Sector: ${SECTOR}"
        echo "   Documents Generated: $DOC_COUNT/$TOTAL_DOCS ($SUCCESS_RATE%)"
        echo "   Generation Time: ${DURATION}s"
        echo "   Output Directory: ./compliance-output/"

        echo "üìÑ Generated Compliance Documents:"
        find ./compliance-output -name "*.md" -type f -exec basename {} \; | sort

    - name: üìä Upload Compliance Documents
      uses: actions/upload-artifact@v4
      with:
        name: compliance-docs-${{ github.run_id }}
        path: ./compliance-output/
        retention-days: 30
        if-no-files-found: error

    - name: üìã Summary
      run: |
        echo "## üìã Compliance Documentation Generated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ‚úÖ Success!" >> $GITHUB_STEP_SUMMARY
        echo "- **Sector**: ${SECTOR}" >> $GITHUB_STEP_SUMMARY
        echo "- **Product**: ${{ github.event.inputs.device_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Manufacturer**: ${{ github.event.inputs.device_manufacturer }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ github.event.inputs.device_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Format**: ${{ github.event.inputs.output_format }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Documents**: $(find ./compliance-output -name "*.md" -type f | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìÑ Generated Files:" >> $GITHUB_STEP_SUMMARY
        find ./compliance-output -name "*.md" -type f -exec basename {} \; | sort | sed 's/^/- ‚úÖ /' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Download the artifacts above to get your compliance documentation!" >> $GITHUB_STEP_SUMMARY

# ============================================================
# CONFIGURATION NOTES
# ============================================================
#
# SECTOR CONFIGURATION:
# Set the SECTOR repository variable to choose your compliance framework:
# - healthcare: FDA 524B, ISO 14971, IEC 81001-5-1 (default)
# - financial: SOX, MiFID II, PCI-DSS (planned)
# - automotive: ISO 26262, ASIL-D (planned)
# - aerospace: DO-178C, DO-254 (planned)
# - industrial: IEC 62443, NIST CSF (planned)
#
# To set: Go to Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí Variables
# Add variable: SECTOR = your_sector
#
# HEALTHCARE-SPECIFIC VARIABLES:
# For medical devices, set these repository variables for enhanced documentation:
# - DEVICE_CLASS: FDA device classification (I, II, or III)
# - INTENDED_USE: Clinical purpose and use case
# - PATIENT_POPULATION: Target patient demographics
# - CLINICAL_ENVIRONMENT: Deployment setting (hospital, home, etc.)
# - SAMD_CATEGORY: Software as Medical Device level (CLASS_I to CLASS_IV)
# - HEALTHCARE_SYSTEMS: Integration systems (HL7,FHIR,DICOM,EHR)
# - REGULATORY_SUBMISSION_TYPE: FDA submission type (510(k), PMA, De Novo)
#
# See docs/SECTOR_CONFIGURATION.md for complete configuration guide
#
# ENVIRONMENT VARIABLES:
# The following environment variables can be adjusted based on your needs:
#
# JIRA Time Windows:
# - JIRA_RECENT_DAYS: Days to look back for recent issues (default: 30, example uses 90)
# - JIRA_SECURITY_DAYS: Days to look back for security issues (default: 60, example uses 180)
# - JIRA_DEFAULT_DAYS: Default time window (default: 30, example uses 60)
#
# Evidence Processing:
# The system uses intelligent batched evidence processing that automatically
# compacts and summarizes all available data. No minimum requirements needed.
# Legacy FDA_MIN_* variables are kept at 0 for backward compatibility.
#
# Evidence Optimization:
# - FDA_MAX_CODE_EVIDENCE_CHARS: Maximum characters of code evidence to include (default: 200000)
#
# Confluence Publishing:
# - CONFLUENCE_URL: Your Confluence instance URL (e.g., https://company.atlassian.net/wiki)
# - CONFLUENCE_EMAIL: Your Confluence email address
# - CONFLUENCE_API_TOKEN: Your Confluence API token
# - CONFLUENCE_SPACE_KEY: Target Confluence space key (e.g., FDA)
# - CONFLUENCE_PUBLISH: Enable/disable publishing (auto/true/false)
#
# WORKFLOW TRIGGERS:
# This client workflow is designed for:
# 1. Manual execution with version input
# 2. Automatic execution on release tags (v*, release-*, *.*.*)
#
# Version Detection:
# - Release tags: Automatically uses tag name as version
# - Manual runs: Uses device_version input or defaults to 1.0.0
#
# Adjust these values based on your project's maturity and activity level.
# For new projects with limited history, consider using the defaults.